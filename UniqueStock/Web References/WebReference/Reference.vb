'------------------------------------------------------------------------------
' <auto-generated>
'     此代码由工具生成。
'     运行时版本:4.0.30319.17929
'
'     对此文件的更改可能会导致不正确的行为，并且如果
'     重新生成代码，这些更改将会丢失。
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'此源代码是由 Microsoft.VSDesigner 4.0.30319.17929 版自动生成。
'
Namespace WebReference
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="ServiceSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class Service
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private HelloWorldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DownloadFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadFilesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DownloadFilesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteFilesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadDirFilesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDataTableBySqlOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExcelSqlOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.UniquePMS.My.MySettings.Default.AndyImportData_WebReference_Service
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event HelloWorldCompleted As HelloWorldCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadFileCompleted As UploadFileCompletedEventHandler
        
        '''<remarks/>
        Public Event DownloadFileCompleted As DownloadFileCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteFileCompleted As DeleteFileCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadFilesCompleted As UploadFilesCompletedEventHandler
        
        '''<remarks/>
        Public Event DownloadFilesCompleted As DownloadFilesCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteFilesCompleted As DeleteFilesCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadDirFilesCompleted As UploadDirFilesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDataTableBySqlCompleted As GetDataTableBySqlCompletedEventHandler
        
        '''<remarks/>
        Public Event ExcelSqlCompleted As ExcelSqlCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HelloWorld", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function HelloWorld() As String
            Dim results() As Object = Me.Invoke("HelloWorld", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub HelloWorldAsync()
            Me.HelloWorldAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HelloWorldAsync(ByVal userState As Object)
            If (Me.HelloWorldOperationCompleted Is Nothing) Then
                Me.HelloWorldOperationCompleted = AddressOf Me.OnHelloWorldOperationCompleted
            End If
            Me.InvokeAsync("HelloWorld", New Object(-1) {}, Me.HelloWorldOperationCompleted, userState)
        End Sub
        
        Private Sub OnHelloWorldOperationCompleted(ByVal arg As Object)
            If (Not (Me.HelloWorldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HelloWorldCompleted(Me, New HelloWorldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadFile", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadFile(<System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal fs() As Byte, ByVal FileName As String) As String
            Dim results() As Object = Me.Invoke("UploadFile", New Object() {fs, FileName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadFileAsync(ByVal fs() As Byte, ByVal FileName As String)
            Me.UploadFileAsync(fs, FileName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadFileAsync(ByVal fs() As Byte, ByVal FileName As String, ByVal userState As Object)
            If (Me.UploadFileOperationCompleted Is Nothing) Then
                Me.UploadFileOperationCompleted = AddressOf Me.OnUploadFileOperationCompleted
            End If
            Me.InvokeAsync("UploadFile", New Object() {fs, FileName}, Me.UploadFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadFileCompleted(Me, New UploadFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DownloadFile", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DownloadFile(ByVal FileName As String) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("DownloadFile", New Object() {FileName})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub DownloadFileAsync(ByVal FileName As String)
            Me.DownloadFileAsync(FileName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DownloadFileAsync(ByVal FileName As String, ByVal userState As Object)
            If (Me.DownloadFileOperationCompleted Is Nothing) Then
                Me.DownloadFileOperationCompleted = AddressOf Me.OnDownloadFileOperationCompleted
            End If
            Me.InvokeAsync("DownloadFile", New Object() {FileName}, Me.DownloadFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnDownloadFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.DownloadFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DownloadFileCompleted(Me, New DownloadFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteFile", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteFile(ByVal FileName As String) As String
            Dim results() As Object = Me.Invoke("DeleteFile", New Object() {FileName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteFileAsync(ByVal FileName As String)
            Me.DeleteFileAsync(FileName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteFileAsync(ByVal FileName As String, ByVal userState As Object)
            If (Me.DeleteFileOperationCompleted Is Nothing) Then
                Me.DeleteFileOperationCompleted = AddressOf Me.OnDeleteFileOperationCompleted
            End If
            Me.InvokeAsync("DeleteFile", New Object() {FileName}, Me.DeleteFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteFileCompleted(Me, New DeleteFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadFiles", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadFiles(<System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal fs() As Byte, ByVal FileName As String, ByVal key As String) As String
            Dim results() As Object = Me.Invoke("UploadFiles", New Object() {fs, FileName, key})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadFilesAsync(ByVal fs() As Byte, ByVal FileName As String, ByVal key As String)
            Me.UploadFilesAsync(fs, FileName, key, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadFilesAsync(ByVal fs() As Byte, ByVal FileName As String, ByVal key As String, ByVal userState As Object)
            If (Me.UploadFilesOperationCompleted Is Nothing) Then
                Me.UploadFilesOperationCompleted = AddressOf Me.OnUploadFilesOperationCompleted
            End If
            Me.InvokeAsync("UploadFiles", New Object() {fs, FileName, key}, Me.UploadFilesOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadFilesOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadFilesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadFilesCompleted(Me, New UploadFilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DownloadFiles", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DownloadFiles(ByVal FileName As String, ByVal key As String) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("DownloadFiles", New Object() {FileName, key})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub DownloadFilesAsync(ByVal FileName As String, ByVal key As String)
            Me.DownloadFilesAsync(FileName, key, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DownloadFilesAsync(ByVal FileName As String, ByVal key As String, ByVal userState As Object)
            If (Me.DownloadFilesOperationCompleted Is Nothing) Then
                Me.DownloadFilesOperationCompleted = AddressOf Me.OnDownloadFilesOperationCompleted
            End If
            Me.InvokeAsync("DownloadFiles", New Object() {FileName, key}, Me.DownloadFilesOperationCompleted, userState)
        End Sub
        
        Private Sub OnDownloadFilesOperationCompleted(ByVal arg As Object)
            If (Not (Me.DownloadFilesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DownloadFilesCompleted(Me, New DownloadFilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteFiles", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteFiles(ByVal FileName As String, ByVal key As String) As String
            Dim results() As Object = Me.Invoke("DeleteFiles", New Object() {FileName, key})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteFilesAsync(ByVal FileName As String, ByVal key As String)
            Me.DeleteFilesAsync(FileName, key, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteFilesAsync(ByVal FileName As String, ByVal key As String, ByVal userState As Object)
            If (Me.DeleteFilesOperationCompleted Is Nothing) Then
                Me.DeleteFilesOperationCompleted = AddressOf Me.OnDeleteFilesOperationCompleted
            End If
            Me.InvokeAsync("DeleteFiles", New Object() {FileName, key}, Me.DeleteFilesOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteFilesOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteFilesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteFilesCompleted(Me, New DeleteFilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadDirFiles", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadDirFiles(<System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal fs() As Byte, ByVal FileName As String, ByVal Dir As String, ByVal key As String) As String
            Dim results() As Object = Me.Invoke("UploadDirFiles", New Object() {fs, FileName, Dir, key})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadDirFilesAsync(ByVal fs() As Byte, ByVal FileName As String, ByVal Dir As String, ByVal key As String)
            Me.UploadDirFilesAsync(fs, FileName, Dir, key, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadDirFilesAsync(ByVal fs() As Byte, ByVal FileName As String, ByVal Dir As String, ByVal key As String, ByVal userState As Object)
            If (Me.UploadDirFilesOperationCompleted Is Nothing) Then
                Me.UploadDirFilesOperationCompleted = AddressOf Me.OnUploadDirFilesOperationCompleted
            End If
            Me.InvokeAsync("UploadDirFiles", New Object() {fs, FileName, Dir, key}, Me.UploadDirFilesOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadDirFilesOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadDirFilesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadDirFilesCompleted(Me, New UploadDirFilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDataTableBySql", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDataTableBySql(ByVal strSql As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetDataTableBySql", New Object() {strSql})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDataTableBySqlAsync(ByVal strSql As String)
            Me.GetDataTableBySqlAsync(strSql, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDataTableBySqlAsync(ByVal strSql As String, ByVal userState As Object)
            If (Me.GetDataTableBySqlOperationCompleted Is Nothing) Then
                Me.GetDataTableBySqlOperationCompleted = AddressOf Me.OnGetDataTableBySqlOperationCompleted
            End If
            Me.InvokeAsync("GetDataTableBySql", New Object() {strSql}, Me.GetDataTableBySqlOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDataTableBySqlOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDataTableBySqlCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDataTableBySqlCompleted(Me, New GetDataTableBySqlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExcelSql", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExcelSql(ByVal strUpdate As String) As Integer
            Dim results() As Object = Me.Invoke("ExcelSql", New Object() {strUpdate})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExcelSqlAsync(ByVal strUpdate As String)
            Me.ExcelSqlAsync(strUpdate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExcelSqlAsync(ByVal strUpdate As String, ByVal userState As Object)
            If (Me.ExcelSqlOperationCompleted Is Nothing) Then
                Me.ExcelSqlOperationCompleted = AddressOf Me.OnExcelSqlOperationCompleted
            End If
            Me.InvokeAsync("ExcelSql", New Object() {strUpdate}, Me.ExcelSqlOperationCompleted, userState)
        End Sub
        
        Private Sub OnExcelSqlOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExcelSqlCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExcelSqlCompleted(Me, New ExcelSqlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub HelloWorldCompletedEventHandler(ByVal sender As Object, ByVal e As HelloWorldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class HelloWorldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub UploadFileCompletedEventHandler(ByVal sender As Object, ByVal e As UploadFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub DownloadFileCompletedEventHandler(ByVal sender As Object, ByVal e As DownloadFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DownloadFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub DeleteFileCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub UploadFilesCompletedEventHandler(ByVal sender As Object, ByVal e As UploadFilesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadFilesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub DownloadFilesCompletedEventHandler(ByVal sender As Object, ByVal e As DownloadFilesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DownloadFilesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub DeleteFilesCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteFilesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteFilesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub UploadDirFilesCompletedEventHandler(ByVal sender As Object, ByVal e As UploadDirFilesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadDirFilesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub GetDataTableBySqlCompletedEventHandler(ByVal sender As Object, ByVal e As GetDataTableBySqlCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDataTableBySqlCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub ExcelSqlCompletedEventHandler(ByVal sender As Object, ByVal e As ExcelSqlCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExcelSqlCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
End Namespace
